#!/bin/bash
#
# Uses the Sunrise/Sunset API (http://api.sunrise-sunset.org/) to set the OS X
# computer's desktop picture based on local daylight. The potential time periods
# are night, sunrise, day, and sunset. Sunrise is defined as the time between
# when astronomical twilight begins and the sun is above the horizon. Sunset is
# defined as when the sun begins dipping below the horizon and the end of
# astronomical twilight.
#
# This program depends on the `whereami` and `jq` utilities. If these are not
# installed, then `homebrew` will detect this and ask if you'd like to install
# them.
#
# This program assumes that pictures will be available for use in:
#
#   ~/Library/Desktop Pictures/Sunrise/
#   ~/Library/Desktop Pictures/Day/
#   ~/Library/Desktop Pictures/Sunset/
#   ~/Library/Desktop Pictures/Night/
#
# A picture will be chosen at random from the appropriate folder. This script
# is meant to be run as a Mac OS LaunchAgent, and an example .plist can be found
# in this repo at local/share/LaunchAgents/com.davidcelis.update-wallpaper.plist
#
# To have this script run automatically throughout the day, copy that file into
# ~/Library/LaunchAgents and edit values as necessary to be usable by your own
# user. Then, run:
#
#   launchctl load ~/Library/LaunchAgents/com.davidcelis.update-wallpaper.plist

abort() { echo "!!! $*" >&2; exit 1; }
log()   { echo "--> $*"; }
logn()  { printf -- "--> $* "; }
logk()  { echo "OK"; }

# Check to see if whereami is installed.
hash whereami 2>/dev/null || {
  logn "whereami is not installed."
  read -p "Install it? [Yn] " -r
  if [[ -z $REPLY || $REPLY =~ ^(Y|y|yes| )$ ]]; then
    brew tap victor/whereami
    brew install whereami
  else
    abort "whereami not installed."
  fi
}

# Check to see if jq is installed.
hash jq 2>/dev/null || {
  logn "jq is not installed."
  read -p "Install it? [Yn] " -r
  if [[ -z $REPLY || $REPLY =~ ^(Y|y|yes| )$ ]]; then
    brew install jq
  else
    abort "jq not installed."
  fi
}

# Grab coordinates using whereami
logn "Getting coordinates:"
COORDINATES=$(whereami --format json)
logk

LAT=$(echo $COORDINATES | jq ".latitude")
LNG=$(echo $COORDINATES | jq ".longitude")
log "You are here: $COORDINATES"

# Use api.sunrise-sunset.org to get various timestamps for daylight events.
logn "Querying sunrise and sunset times:"
SUN_DATA=$(curl -sS "http://api.sunrise-sunset.org/json?lat=$LAT&lng=$LNG&formatted=0")
STATUS=$(echo $SUN_DATA | jq --raw-output ".status")

[ "$STATUS" != "OK" ] && abort "api.sunrise-sunset.org wasn't OK"
logk

# Parse results using jq
SUNRISE_START=$(echo $SUN_DATA | jq --raw-output ".results.astronomical_twilight_begin")
SUNRISE_END=$(echo $SUN_DATA | jq --raw-output ".results.sunrise")
SUNSET_START=$(echo $SUN_DATA | jq --raw-output ".results.sunset")
SUNSET_END=$(echo $SUN_DATA | jq --raw-output ".results.astronomical_twilight_end")

log "Sunrise starts at $SUNRISE_START and ends at $SUNRISE_END"
log "Sunrset starts at $SUNSET_START and ends at $SUNSET_END"

# Convert all ISO 8601 timestamps to UNIX timestamps for easy number comparison
SUNRISE_START=$(date -ujf "%Y-%m-%dT%H:%M:%S+00:00" $SUNRISE_START "+%s")
SUNRISE_END=$(date -ujf "%Y-%m-%dT%H:%M:%S+00:00" $SUNRISE_END "+%s")
SUNSET_START=$(date -ujf "%Y-%m-%dT%H:%M:%S+00:00" $SUNSET_START "+%s")
SUNSET_END=$(date -ujf "%Y-%m-%dT%H:%M:%S+00:00" $SUNSET_END "+%s")

NOW=$(date -u +%s)
PERIOD=""

# Determine the current daylight period based on the current time
(( $NOW < $SUNRISE_START || $NOW > $SUNSET_END))   && PERIOD="Night"
(( $NOW > $SUNRISE_START && $NOW < $SUNRISE_END))  && PERIOD="Sunrise"
(( $NOW > $SUNRISE_END   && $NOW < $SUNSET_START)) && PERIOD="Day"
(( $NOW > $SUNSET_START  && $NOW < $SUNSET_END))   && PERIOD="Sunset"

log "Right now, it's $(date -u +%Y-%m-%dT%H:%M:%S+00:00). That means you're in $PERIOD."

# Use AppleScript to change the desktop picture
logn "Changing the desktop picture:"
osascript <<EOF
on getImage()
  tell application "Finder"
    return some file of folder ("Library:Desktop Pictures:$PERIOD") of home as text
  end tell
end getImage

tell application "Finder"
  try
    set desktop picture to my getImage()
  end try
end tell
EOF
logk

exit 0

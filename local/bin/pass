#!/usr/bin/env ruby
# encoding: utf-8
#
# pass: A simple CLI wrapper over `security' and the keychain.
#
# usage: pass <uri>
#
# Â© 2012 Stephen Celis <stephen@stephencelis.com>
#--
# TODO:
#
# - Accept stdin, e.g.: `ha-gen | pass https://mail.gmail.com/`
# - Built-in completion, e.g.:
#
# function _pass {
#   compadd $(security dump-keychain | grep '"srvr"' | cut -d '"' -f 4 -)
# }
# compdef _pass pass
#++
require 'io/console'
require 'open3'
require 'optparse'
require 'uri'

module Pasteboard
  module_function

  def copy string
    IO.popen('pbcopy', 'w') { |io| io.write string }
  end

  def paste
    IO.popen('pbpaste') { |io| io.read }
  end
end

module Keychain
  module_function

  def save uri, password, username
    uri = URI(uri)
    protocol = uri.scheme == 'https' ? 'htps' : '% 4s' % uri.scheme
    options = %W[
      -a #{username} -s #{uri.host} -w #{password}
      -r #{protocol} -P #{uri.port} -p #{uri.request_uri}
    ]
    system "security add-internet-password #{options.join ' '}"
  end

  def find host, include_username = false
    uri = URI(host)
    command = "security find-internet-password -gs #{uri.host || uri}"
    Open3.popen3(command) do |stdin, stdout, stderr|
      data = stderr.read.match(/^password: [^"]*"(.+)"$/)
      if data
        response = [data[1]]
        if include_username
          data = stdout.read.match(/^    "acct"<blob>="(.+)"$/)
          response << data[1] if data
        end
        response.join "\n"
      end
    end
  end
end

Signal.trap 'INT' do
  print '^C' unless STDIN.echo?
  abort
end

include_username = false
options = OptionParser.new do |opts|
  command = File.basename $0
  opts.banner = <<-EOF
usage: #{command} <uri> [<password>]
       #{command} <host>
  EOF
  opts.on('-u') { include_username = true }
end
options.parse!

def read_password host, include_username = false
  previous = Pasteboard.paste
  password = Keychain.find host, include_username

  if password.nil?
    warn 'Password not found.'

    uri = URI(host)
    if uri.scheme && STDIN.tty?
      print 'Enter username: '
      username = STDIN.gets
      if username
        username.chomp!
        unless username.empty?
          print 'Enter password: '
          password = STDIN.noecho { STDIN.gets }
          if password
            password.chomp!
            unless password.empty?
              write_password host, password, username
              return
            end
          end
        end
      end
    end

    abort
  end

  unless STDIN.tty?
    print password
    exit
  end

  Pasteboard.copy password
  at_exit { Pasteboard.copy previous if Pasteboard.paste == password }

  seconds = 5
  print "Password available in clipboard for #{seconds} seconds"
  seconds.times do
    sleep 1
    print '.'
  end
  puts
end

def write_password uri, password, username
  Keychain.save uri, password, username
end

case ARGV.length
when 2..3
  uri, password, username = ARGV
  write_password uri, password, username
when 1
  host, = ARGV
  read_password host, include_username
else
  puts options
  abort
end
